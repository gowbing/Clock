package com.miracle.clock.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.miracle.clock.model.normal.Clock;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CLOCK".
*/
public class ClockDao extends AbstractDao<Clock, Long> {

    public static final String TABLENAME = "CLOCK";

    /**
     * Properties of entity Clock.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property Time = new Property(1, long.class, "time", false, "TIME");
        public final static Property Daytime = new Property(2, long.class, "daytime", false, "DAYTIME");
        public final static Property Repeattime = new Property(3, long.class, "repeattime", false, "REPEATTIME");
        public final static Property Content = new Property(4, String.class, "content", false, "CONTENT");
        public final static Property Whichday = new Property(5, int.class, "whichday", false, "WHICHDAY");
        public final static Property Isstart = new Property(6, boolean.class, "isstart", false, "ISSTART");
    };


    public ClockDao(DaoConfig config) {
        super(config);
    }
    
    public ClockDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CLOCK\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"TIME\" INTEGER NOT NULL ," + // 1: time
                "\"DAYTIME\" INTEGER NOT NULL ," + // 2: daytime
                "\"REPEATTIME\" INTEGER NOT NULL ," + // 3: repeattime
                "\"CONTENT\" TEXT," + // 4: content
                "\"WHICHDAY\" INTEGER NOT NULL ," + // 5: whichday
                "\"ISSTART\" INTEGER NOT NULL );"); // 6: isstart
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CLOCK\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Clock entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getTime());
        stmt.bindLong(3, entity.getDaytime());
        stmt.bindLong(4, entity.getRepeattime());
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(5, content);
        }
        stmt.bindLong(6, entity.getWhichday());
        stmt.bindLong(7, entity.getIsstart() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Clock entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getTime());
        stmt.bindLong(3, entity.getDaytime());
        stmt.bindLong(4, entity.getRepeattime());
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(5, content);
        }
        stmt.bindLong(6, entity.getWhichday());
        stmt.bindLong(7, entity.getIsstart() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public Clock readEntity(Cursor cursor, int offset) {
        Clock entity = new Clock( //
            cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // time
            cursor.getLong(offset + 2), // daytime
            cursor.getLong(offset + 3), // repeattime
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // content
            cursor.getInt(offset + 5), // whichday
            cursor.getShort(offset + 6) != 0 // isstart
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Clock entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setTime(cursor.getLong(offset + 1));
        entity.setDaytime(cursor.getLong(offset + 2));
        entity.setRepeattime(cursor.getLong(offset + 3));
        entity.setContent(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setWhichday(cursor.getInt(offset + 5));
        entity.setIsstart(cursor.getShort(offset + 6) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Clock entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Clock entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
